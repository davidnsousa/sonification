<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="NS2x$G!7O2rK?KTTDeI8" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="}!pDN-9Un-BiK[4JX@zo" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const findMax = (array: number[]): number =&gt; {" line1="    if (array.length === 0) {" line2="        return NaN;" line3="    }" line4="    let result = array[0];" line5="    for (let i = 1; i &lt; array.length; ++i) {" line6="        const entry = array[i];" line7="        if (entry &gt; result) {" line8="            result = entry;" line9="        }" line10="    }" line11="    return result;" line12="};" numlines="13" declaredvars="findMax"></mutation><next><block type="typescript_statement" id="Rm4tqtv!z%1B%~{2)oaU" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const findMin = (array: number[]): number =&gt; {" line1="    if (array.length === 0) {" line2="        return NaN;" line3="    }" line4="    let result2 = array[0];" line5="    for (let j = 1; j &lt; array.length; ++j) {" line6="        const entry2 = array[j];" line7="        if (entry2 &lt; result2) {" line8="            result2 = entry2;" line9="        }" line10="    }" line11="    return result2;" line12="};" numlines="13" declaredvars="findMin"></mutation><next><block type="typescript_statement" id="*GFP?}RG/27G[ukOB(5a" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum SCALE {" line1="    //% block=&quot;Major&quot;" line2="    major," line3="    //% block=&quot;Minor&quot;" line4="    minor" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="?94)/n5}Z.S?pDwQKqb`" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum INPUTSENSOR {" line1="    //% block=&quot;light Level&quot;" line2="    LIGHT," line3="    //% block=&quot;sound Level&quot;" line4="    SOUND," line5="    //% block=&quot;acceleration (x)&quot;" line6="    ACCELERATIONX," line7="    //% block=&quot;acceleration (y)&quot;" line8="    ACCELERATIONY," line9="    //% block=&quot;acceleration (z)&quot;" line10="    ACCELERATIONZ," line11="    //% block=&quot;acceleration strength&quot;" line12="    ACCELERATIONSTRENGTH," line13="    //% block=&quot;compass heading&quot;" line14="    COMPASS" line15="}" numlines="16"></mutation><next><block type="typescript_statement" id="LV$@J1O_0|/aavj:?gTG" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace sonification {" line1="    //% blockId=maparray" line2="    //% block=&quot;map array $list to $key $rule on $octaves octaves&quot;" line3="    //% inlineInputMode=inline" line4="    //% key.shadow=&quot;device_note&quot;" line5="    //% key.defl=Note.C" line6="    //% rule.shadow=&quot;chooseScale&quot;" line7="    //% rule.defl=Scale.major" line8="    //% octaves.defl=&quot;1&quot;" line9="    //% group=&quot;Map&quot;" line10="    export function mapArray(list: number[], key: number, rule: number[], octaves: number): number[] {" line11="        let notes: any[] = [key];" line12="        for (let o = 1; o &lt;= octaves; o++) {" line13="            for (let r = 0; r &lt; rule.length; r++) {" line14="                notes.push(Math.round(o * key * rule[r]));" line15="            }" line16="        }" line17="        let mappednotes: any[] = [];" line18="        let low = findMin(list);" line19="        let high = findMax(list);" line20="        for (let k = 0; k &lt; list.length; k++) {" line21="            let mappedindex = Math.round(((list[k] - low) / (high - low)) * (notes.length - 1))" line22="            mappednotes.push(notes[mappedindex]);" line23="        }" line24="        return mappednotes;" line25="    }" line26="    //% blockId=mappedvalue" line27="    //% block=&quot;map $value from low $low high $high to $key $rule on $octaves octaves&quot;" line28="    //% inlineInputMode=inline" line29="    //% key.shadow=&quot;device_note&quot;" line30="    //% key.defl=Note.C" line31="    //% rule.shadow=&quot;chooseScale&quot;" line32="    //% rule.defl=Scale.major" line33="    //% octaves.defl=&quot;1&quot;" line34="    //% group=&quot;Map&quot;" line35="    export function map(value: number, low: number, high: number, key: number, rule: number[], octaves: number): number {" line36="        let notes2: any[] = [key];" line37="        for (let p = 1; p &lt;= octaves; p++) {" line38="            for (let s = 0; s &lt; rule.length; s++) {" line39="                notes2.push(Math.round(p * key * rule[s]));" line40="            }" line41="        }" line42="        let mappedindex2 = Math.round(((value - low) / (high - low)) * (notes2.length - 1))" line43="        return notes2[mappedindex2];" line44="    }   " line45="    //% blockId=PlaySensor" line46="    //% block=&quot;play $sensor mapped to $key $rule on $octaves octaves for $duration ms&quot;" line47="    //% inlineInputMode=inline" line48="    //% key.shadow=&quot;device_note&quot;" line49="    //% key.defl=Note.C" line50="    //% rule.shadow=&quot;chooseScale&quot;" line51="    //% rule.defl=Scale.major" line52="    //% duration.defl=500" line53="    //% octaves.defl=&quot;1&quot;" line54="    //% group=&quot;Play&quot;" line55="    export function playSensor(sensor: INPUTSENSOR, key: number, rule: number[], octaves: number, duration: number) {" line56="        let value;" line57="        let low2;" line58="        let high2;" line59="        switch (sensor) {" line60="            case INPUTSENSOR.LIGHT:" line61="                // Logic for light sensor" line62="                value = input.lightLevel();" line63="                low2 = 0;" line64="                high2 = 255;" line65="                break;" line66="            case INPUTSENSOR.SOUND:" line67="                // Logic for light sensor" line68="                value = input.soundLevel();" line69="                low2 = 0;" line70="                high2 = 255;" line71="                break;" line72="            case INPUTSENSOR.ACCELERATIONX:" line73="                // Logic for acceleration in the X direction" line74="                value = input.acceleration(Dimension.X);" line75="                low2 = 0;" line76="                high2 = 1023;" line77="                break;" line78="            case INPUTSENSOR.ACCELERATIONY:" line79="                // Logic for acceleration in the Y direction" line80="                value = input.acceleration(Dimension.Y);" line81="                low2 = 0;" line82="                high2 = 1023;" line83="                break;" line84="            case INPUTSENSOR.ACCELERATIONZ:" line85="                // Logic for acceleration in the Z direction" line86="                value = input.acceleration(Dimension.Z);" line87="                low2 = 0;" line88="                high2 = 1023;" line89="                break;" line90="            case INPUTSENSOR.ACCELERATIONSTRENGTH:" line91="                // Logic for acceleration strength" line92="                value = input.acceleration(Dimension.Strength);" line93="                low2 = 0;" line94="                high2 = 1771;" line95="                break;" line96="            case INPUTSENSOR.COMPASS:" line97="                // Logic for compass sensor" line98="                value = input.compassHeading();" line99="                low2 = 0;" line100="                high2 = 359;" line101="                break;" line102="        }" line103="        let notes3: any[] = [key];" line104="        for (let q = 1; q &lt;= octaves; q++) {" line105="            for (let t = 0; t &lt; rule.length; t++) {" line106="                notes3.push(Math.round(q * key * rule[t]));" line107="            }" line108="        }" line109="        let mappedindex3 = Math.round(((value - low2) / (high2 - low2)) * (notes3.length - 1))" line110="        music.playTone(notes3[mappedindex3], duration);" line111="    }" line112="    //% blockId=music_play_array" line113="    //% block=&quot;play tones from $array for $duration ms each tone&quot;" line114="    //% tone.shadow=&quot;device_note&quot;" line115="    //% duration.defl=500" line116="    //% group=&quot;Play&quot;" line117="    export function playArray(array: number[], duration: number) {" line118="        for (let note of array) {" line119="            music.playTone(note, duration);" line120="        }" line121="    }" line122="    //% blockId=music_play_note" line123="    //% block=&quot;play tone $tone for $duration ms&quot;" line124="    //% tone.shadow=&quot;device_note&quot;" line125="    //% tone.defl=Note.C" line126="    //% duration.defl=500" line127="    //% group=&quot;Play&quot;" line128="    export function playNote(tone: number, duration: number) {" line129="        music.playTone(tone, duration);" line130="    }" line131="    //% blockId=rest" line132="    //% block=&quot;rest for $duration ms&quot;" line133="    //% duration.defl=1000" line134="    //% group=&quot;Play&quot;" line135="    export function rest(duration: number) {" line136="        music.stopAllSounds();" line137="        basic.pause(duration);" line138="    }" line139="    //% blockId=chooseScale" line140="    //% block=&quot;$scale&quot;" line141="    //% group=&quot;Auxiliary&quot;" line142="    export function chooseScale(scale: SCALE): number[] {" line143="        let rule: any[] = [];" line144="        switch (scale) {" line145="            case SCALE.major: rule = [9 / 8, 5 / 4, 4 / 3, 3 / 2, 5 / 3, 15 / 8, 2];" line146="                break;" line147="            case SCALE.minor: rule = [9 / 8, 6 / 5, 4 / 3, 3 / 2, 8 / 5, 9 / 5, 2];" line148="                break;" line149="        }" line150="        return rule;" line151="    }" line152="}" numlines="153"></mutation></block></next></block></next></block></next></block></next></block></statement></block></xml>